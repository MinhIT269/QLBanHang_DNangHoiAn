<!DOCTYPE html>
<html lang="en">

<head>
	@await Html.PartialAsync("_Header")
</head>

<body>

	<!-- START Wrapper -->
	<div class="wrapper">

		<!-- ========== Topbar Start ========== -->
		<header class="topbar">
			<div class="container-fluid">
				<div class="navbar-header">
					<div class="d-flex align-items-center">
						<!-- Menu Toggle Button -->
						<div class="topbar-item">
							<button type="button" class="button-toggle-menu me-2">
								<iconify-icon icon="solar:hamburger-menu-broken" class="fs-24 align-middle"></iconify-icon>
							</button>
						</div>

						<!-- Menu Toggle Button -->
						<div class="topbar-item">
							<h4 class="fw-bold topbar-button pe-none text-uppercase mb-0">Danh Sách Sản Phẩm</h4>
						</div>
					</div>

					<div class="d-flex align-items-center gap-1">

						@await Html.PartialAsync("_Topbar")

						<!-- App Search-->
						<form class="app-search d-none d-md-block ms-2">
							<div class="position-relative">
								<input type="search" name="searchQuery" class="form-control" placeholder="Tìm kiếm sản phẩm..." autocomplete="off" value="">
								<iconify-icon icon="solar:magnifer-linear" class="search-widget-icon"></iconify-icon>
							</div>
						</form>
					</div>
				</div>
			</div>
		</header>

		<!-- Right Sidebar (Theme Settings) -->
		@await Html.PartialAsync("_SidebarRight")
		<!-- ========== Topbar End ========== -->
		<!-- ========== App Menu Start ========== -->
		@await Html.PartialAsync("_SidebarMenu")
		<!-- ========== App Menu End ========== -->
		<!-- ==================================================== -->
		<!-- Start right Content here -->
		<!-- ==================================================== -->
		<div class="page-content">

			<!-- Start Container Fluid -->
			<div class="container-fluid">
				<div class="row">
					<div class="col-md-6 col-xl-3">
						<div class="card bg-info-subtle">
							<div class="card-body">
								<div class="d-flex align-items-center justify-content-between ">
									<div>
										<h4 class="card-title mb-2 d-flex align-items-center gap-2">Tổng Số Lượng </h4>
										<p id="totalProducts" class="text-muted fw-medium fs-22 mb-0">3521 <span class="fs-12">(Sản phẩm)</span></p>
									</div>
									<div>
										<div class="avatar-md bg-primary bg-opacity-10 rounded">
											<iconify-icon icon="solar:box-broken" class="fs-32 text-primary avatar-title"></iconify-icon>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="col-md-6 col-xl-3">
						<div class="card bg-success-subtle">
							<div class="card-body">
								<div class="d-flex align-items-center justify-content-between">
									<div>
										<h4 class="card-title mb-2 d-flex align-items-center gap-2">Còn Hàng</h4>
										<p id="availableProducts" class="text-muted fw-medium fs-22 mb-0">1311 <span class="fs-12">(Sản phẩm)</span></p>
									</div>
									<div>
										<div class="avatar-md bg-primary bg-opacity-10 rounded">
											<iconify-icon icon="solar:reorder-broken" class="fs-32 text-primary avatar-title"></iconify-icon>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>

					<div class="col-md-6 col-xl-3">
						<div class="card bg-primary-subtle">
							<div class="card-body">
								<div class="d-flex align-items-center justify-content-between">
									<div>
										<h4 class="card-title mb-2 d-flex align-items-center gap-2">Gần Hết Hàng</h4>
										<p id="lowStockProducts" class="text-muted fw-medium fs-22 mb-0">231 <span class="fs-12">(Sản phẩm)</span></p>
									</div>
									<div>
										<div class="avatar-md bg-primary bg-opacity-10 rounded">
											<iconify-icon icon="solar:bag-cross-broken" class="fs-32 text-primary avatar-title"></iconify-icon>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>

					<div class="col-md-6 col-xl-3">
						<div class="card card bg-warning-subtle ">
							<div class="card-body">
								<div class="d-flex align-items-center justify-content-between">
									<div>
										<h4 class="card-title mb-2 d-flex align-items-center gap-2">Sản Phẩm Mới</h4>
										<p id="newProducts" class="text-muted fw-medium fs-22 mb-0">2334 <span class="badge text-danger bg-danger-subtle fs-12"><i class="bx bx-down-arrow-alt"></i>4.5%</span> <span class="fs-12">(Last Week)</span></p>
									</div>
									<div>
										<div class="avatar-md bg-primary bg-opacity-10 rounded">
											<iconify-icon icon="solar:users-group-two-rounded-broken" class="fs-32 text-primary avatar-title"></iconify-icon>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>

				</div>
				<div class="row">
					<div class="col-xl-12">
						<div class="card">
							<div class="card-header d-flex justify-content-between align-items-center gap-1">
								<h4 class="card-title flex-grow-1">Tất Cả</h4>

								<a href="@Url.Action("CreateProduct", "Product")" class="btn btn-sm btn-primary">
									Thêm Sản Phẩm
								</a>

								<div class="dropdown">
									<a href="#" class="dropdown-toggle btn btn-sm btn-outline-light" data-bs-toggle="dropdown" aria-expanded="false">
										Sắp xếp
									</a>
									<div class="dropdown-menu dropdown-menu-end">
										<!-- item-->
										<a href="#!" class="dropdown-item" onclick="setSortCriteria('name')">Tên sản phẩm</a>
										<!-- item-->
										<a href="#!" class="dropdown-item" onclick="setSortCriteria('category')">Loại sản phẩm</a>
										<!-- item-->
										<a href="#!" class="dropdown-item" onclick="setSortCriteria('stock')">Tồn kho</a>
										<!-- item-->
										<a href="#!" class="dropdown-item" onclick="setSortCriteria('price')">Giá tiền</a>
									</div>
								</div>
							</div>
							<div>
								<div class="table-responsive">
									<table class="table align-middle mb-0 table-hover table-centered">
										<thead class="bg-light-subtle">
											<tr>
												<th style="width: 7px; padding-left: 10px; padding-right: 0;">#</th>
												<th>Sản Phẩm</th>
												<th>Giá Tiền</th>
												<th>Giá Khuyến Mãi</th>
												<th>Số Lượng</th>
												<th>Thương Hiệu</th>
												<th>Danh Mục</th>
												<th>Bảo Hành</th>
												<th>Đánh Giá</th>
												<th>Hành Động</th>
											</tr>
										</thead>
										<tbody id="productTableBody">
											<!--Du lieu san pham duoc chen-->
										</tbody>
									</table>
								</div>
								<!-- end table-responsive -->
							</div>
							<div class="card-footer border-top">
								<nav aria-label="Page navigation example">
									<ul class="pagination justify-content-end mb-0" id="pagination">
									</ul>
								</nav>
							</div>
						</div>
					</div>

				</div>

			</div>
			<!-- End Container Fluid -->
			<!-- ========== Footer Start ========== -->
			@await Html.PartialAsync("_Footer")
			<!-- ========== Footer End ========== -->

		</div>
		<!-- ==================================================== -->
		<!-- End Page Content -->
		<!-- ==================================================== -->

	</div>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

	<script>
		const itemsPerPage = 10;
		let currentPage = 1;
		const maxVisiblePages = 5;
		let searchQuery = ''; // Biến lưu trữ từ khóa tìm kiếm
		let sortCriteria = 'name'; // Cập nhật tiêu chí sắp xếp mặc định
		let isDescending = false;

		function updateUrlParameters() {
			const url = new URL(window.location);
			url.searchParams.set('searchQuery', searchQuery);
			url.searchParams.set('sortCriteria', sortCriteria);
			url.searchParams.set('currentPage', currentPage);
			window.history.pushState({}, '', url);
		}
		// Chọn lựa tiêu chí để săp xếp
		function setSortCriteria(criteria) {
			if (sortCriteria === criteria) {
				// Nếu tiêu chí sắp xếp giống lần trước, đổi trạng thái isDescending
				isDescending = !isDescending;
			} else {
				// Nếu tiêu chí sắp xếp thay đổi, đặt isDescending về false
				isDescending = false;
			}
			sortCriteria = criteria; // Cập nhật tiêu chí sắp xếp
			currentPage = 1; // Reset trang về đầu tiên khi thay đổi tiêu chí sắp xếp
			updateUrlParameters(); // Cập nhật URL với các tham số hiện tại
			renderTable(currentPage); // Tải lại bảng với tiêu chí sắp xếp mới
			renderPagination(); // Cập nhật phân trang
		}

		// Tính toán các sản phẩm của trang hiện tại
		async function renderTable(page) {
			const paginatedProducts = await GetProduct(searchQuery, page, itemsPerPage, sortCriteria); // lấy đến phần tử thứ itemsPerPage, không bao gồm phần tử ở chỉ số itemsPerPage
			// Chèn dữ liệu vào bảng
			const tableBody = document.getElementById('productTableBody');
			tableBody.innerHTML = ''; // Xóa nội dung hiện tại của bảng
			paginatedProducts.forEach((item, index) => {
				tableBody.innerHTML += HTMLProduct(item, (page - 1) * itemsPerPage + index);
			});
		}


		async function deleteProduct(productId) {
			const confirmDelete = confirm('Are you sure you want to delete this product?');
			if (!confirmDelete) return;

			try {
				const url = `https://localhost:7069/api/admin/DeleteProduct/${encodeURIComponent(productId)}`;
				console.log(url)
				await $.ajax({
					url: url,
					type: 'DELETE',
					success: function (result) {
						alert('Product deleted successfully!');
						// Tải lại bảng sau khi xóa
						renderTable(currentPage);
						renderPagination();
						loadProductStats();
					},
					error: function (jqXHR, textStatus, errorThrown) {
						console.error('Error: ', textStatus, errorThrown);
						alert('Failed to delete the product.');
					}
				});
			} catch (error) {
				console.error('Error: ', error);
				alert('Failed to delete the product');
			}
		}

		// Quản lí việc hiển thị các số trang trên thanh phân trang
		async function renderPagination() {
			const totalPages = await GetTotalPages(); // Lấy tổng số trang từ API

			const pagination = document.getElementById('pagination');
			pagination.innerHTML = '';

			// Tính toán phạm vi các trang cần hiển thị
			let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
			let endPage = Math.min(totalPages, currentPage + Math.floor(maxVisiblePages / 2));

			// Điều chỉnh start và end page nếu số lượng trang không đủ để hiển thị
			if (endPage - startPage + 1 < maxVisiblePages) {
				if (endPage === totalPages) {
					startPage = Math.max(1, endPage - maxVisiblePages + 1);
				} else {
					endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
				}
			}

			// Nút Previous
			pagination.innerHTML += `
															<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
																<a class="page-link" href="javascript:void(0);" onclick="changePage(${currentPage - 1})">Trước</a>
															</li>
														`;

			// Các số trang
			for (let i = startPage; i <= endPage; i++) {
				pagination.innerHTML += `
																<li class="page-item ${i === currentPage ? 'active' : ''}">
																	<a class="page-link" href="javascript:void(0);" onclick="changePage(${i})">${i}</a>
																</li>
															`;
			}

			// Nút Next
			pagination.innerHTML += `
															<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
																<a class="page-link" href="javascript:void(0);" onclick="changePage(${currentPage + 1})">Tiếp Theo</a>
															</li>
														`;
		}

		async function changePage(page) {
			const totalPages = await GetTotalPages(); // Đảm bảo GetTotalPages trả về tổng số trang
			if (page < 1 || page > totalPages) return; // Bỏ qua các trang ngoài phạm vi
			currentPage = page;
			await renderTable(page); // Đợi renderTable hoàn tất
			renderPagination(); // Hiển thị phân trang sau khi bảng đã được làm mới
		}
		//Load dữ liệu sản phẩm
		function HTMLProduct(item, index) {
			console.log(item);

			// Đảm bảo item.Price là một số
			const price = parseFloat(item.price);
			const formattedPrice = isNaN(price) ? '0' : price.toLocaleString('vi-VN');
			const pricePromotion = parseFloat(item.promotionPrice);
			const formattedPricePromtion = isNaN(pricePromotion) ? '0' : pricePromotion.toLocaleString('vi-VN');``
			const html = `
								<tr>
									<td style="padding-left: 10px; padding-right: 0;">${index + 1}<td>
										<div class="d-flex align-items-center gap-2">
											<div class="rounded bg-light avatar-md d-flex align-items-center justify-content-center">
												<img src="${item.imageUrl}" alt="" class="avatar-md">
											</div>
											<div>
												<a href="EditProduct/${item.productId}" class="text-dark fw-medium fs-15">${item.name}</a>
											</div>
										</div>
									</td>
									<td>${formattedPrice} <small>đ</small></td>
									<td>${formattedPricePromtion} <small>đ</small></td>
									<td>
										<p class="mb-1 text-muted"><span class="text-dark fw-medium">${item.stock} sp</span></p>
										<p class="mb-0 text-muted">0 Sold</p>
									</td>
									<td>${item.brandName}</td>
									<td>${item.categoryNames}</td>
									<td>${item.warranty}</td>
									<td><span class="badge p-1 bg-light text-dark fs-12 me-1"><i class="bx bxs-star align-text-top fs-14 text-warning me-1"></i> 4.5</span> 55 Review</td>
									<td>
										<div class="d-flex gap-2">
										   <a href="EditProduct/${item.productId}" class="btn btn-light btn-sm"><iconify-icon icon="solar:eye-broken" class="align-middle fs-18"></iconify-icon></a>
										   <a href="EditProduct/${item.productId}" class="btn btn-soft-primary btn-sm"><iconify-icon icon="solar:pen-2-broken" class="align-middle fs-18"></iconify-icon></a>
										   <a href="#!" class="btn btn-soft-danger btn-sm" onclick="deleteProduct('${item.productId}')">
										   <iconify-icon icon="solar:trash-bin-minimalistic-2-broken" class="align-middle fs-18"></iconify-icon>
										</div>
									</td>
								</tr>
							`;
			return html;
		}

		async function GetProduct(textsearch, page, limit, sortCriteria) {
			const url = `https://localhost:7069/api/admin/GetFilteredProducts?searchQuery=${encodeURIComponent(textsearch)}&page=${page}&sortCriteria=${encodeURIComponent(sortCriteria)}&isDescending=${isDescending}`;

			return new Promise((resolve, reject) => {
				$.ajax({
					url: url,
					type: 'GET',
					dataType: 'json',
					success: function (data) {
						console.log('Data received:', data);
						resolve(data); // Trả về dữ liệu nhận được từ API
					},
					error: function (jqXHR, textStatus, errorThrown) {
						console.error('Error:', textStatus, errorThrown);
						reject(errorThrown); // Đưa lỗi ra ngoài Promise
					}
				});
			});
		}

		async function GetTotalPages() {
			const response = await $.ajax({
				url: 'https://localhost:7069/api/Admin/TotalPagesProduct?searchQuery=' + encodeURIComponent(searchQuery),
				type: 'GET',
				dataType: 'json'
			});
			console.log(searchQuery);

			return response > 0 ? response : 1; // Nếu `totalPages` là 0 thì trả về 1
		}

		async function loadProductStats() {
			try {
				const response = await fetch("https://localhost:7069/api/Product/GetProductStats");
				const stats = await response.json();
				console.log(stats);
				document.getElementById('totalProducts').innerText = `${stats.totalProducts}`;
				document.getElementById('availableProducts').innerText = `${stats.availableProducts}`;
				document.getElementById('lowStockProducts').innerText = `${stats.lowStockProducts}`;
				document.getElementById('newProducts').innerText = `${stats.newProducts}`;
			}catch(error) {
				console.error("Failed to load product stats: ", error);
			}

		}

		// Xử lý sự kiện tìm kiếm
		document.querySelector('input[name="searchQuery"]').addEventListener('keydown', async (event) => {
			if (event.key === 'Enter') {
				event.preventDefault(); // Ngăn chặn hành vi mặc định của phím Enter trong form

				searchQuery = event.target.value; // Cập nhật từ khóa tìm kiếm
				currentPage = 1; // Reset trang về 1 khi tìm kiếm mới
				await renderTable(currentPage);
				await renderPagination();
			}
		});

		// Khởi tạo
		renderTable(currentPage);
		renderPagination();
        loadProductStats();
	</script>


	<!-- END Wrapper -->
	<!-- Vendor Javascript (Require in all Page) -->
	<script src="~/js/vendor.js"></script>

	<!-- App Javascript (Require in all Page) -->
	<script src="~/js/app.js"></script>

</body>
</html>