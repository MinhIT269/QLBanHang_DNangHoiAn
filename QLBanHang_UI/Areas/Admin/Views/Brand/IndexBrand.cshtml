<!DOCTYPE html>
<html lang="en">

<head>
	@await Html.PartialAsync("_Header")
</head>

<body>

	<!-- START Wrapper -->
	<div class="wrapper">

		<!-- ========== Topbar Start ========== -->
		<header class="topbar">
			<div class="container-fluid">
				<div class="navbar-header">
					<div class="d-flex align-items-center">
						<!-- Menu Toggle Button -->
						<div class="topbar-item">
							<button type="button" class="button-toggle-menu me-2">
								<iconify-icon icon="solar:hamburger-menu-broken" class="fs-24 align-middle"></iconify-icon>
							</button>
						</div>

						<!-- Menu Toggle Button -->
						<div class="topbar-item">
							<h4 class="fw-bold topbar-button pe-none text-uppercase mb-0">Danh Sách Thương Hiệu</h4>
						</div>
					</div>

					<div class="d-flex align-items-center gap-1">

						@await Html.PartialAsync("_Topbar")

						<!-- App Search-->
						<form class="app-search d-none d-md-block ms-2">
							<div class="position-relative">
								<input type="search" name="searchQuery" class="form-control" placeholder="Tìm kiếm..." autocomplete="off" value="">
								<iconify-icon icon="solar:magnifer-linear" class="search-widget-icon"></iconify-icon>
							</div>
						</form>
					</div>
				</div>
			</div>
		</header>

		<!-- Right Sidebar (Theme Settings) -->
		@await Html.PartialAsync("_SidebarRight")
		<!-- ========== Topbar End ========== -->
		<!-- ========== App Menu Start ========== -->
		@await Html.PartialAsync("_SidebarMenu")
		<!-- ========== App Menu End ========== -->
		<!-- ==================================================== -->
		<!-- Start right Content here -->
		<!-- ==================================================== -->
		<div class="page-content">

			<!-- Start Container Fluid -->
			<div class="container-xxl">

				<div class="row">
					<div class="col-lg-4 col-md-4 col-sm-12">
						<div class="card bg-info-subtle">
							<div class="card-body">
								<div class="d-flex align-items-center justify-content-between">
									<div>
										<h4 class="card-title mb-2 d-flex align-items-center gap-2">Số Lượng Sản Phẩm </h4>
										<p class="text-muted fw-medium fs-22 mb-0">3521 <span class="fs-12">(sản phẩm)</span></p>
									</div>
									<div>
										<div class="avatar-md bg-primary bg-opacity-10 rounded">
											<iconify-icon icon="solar:box-broken" class="fs-32 text-primary avatar-title"></iconify-icon>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="col-lg-4 col-md-4 col-sm-12">
						<div class="card bg-success-subtle">
							<div class="card-body">
								<div class="d-flex align-items-center justify-content-between">
									<div>
										<h4 class="card-title mb-2 d-flex align-items-center gap-2">Còn Hàng</h4>
										<p class="text-muted fw-medium fs-22 mb-0">1311 <span class="fs-12">(sản phẩm)</span></p>
									</div>
									<div>
										<div class="avatar-md bg-primary bg-opacity-10 rounded">
											<iconify-icon icon="solar:reorder-broken" class="fs-32 text-primary avatar-title"></iconify-icon>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>

					<div class="col-lg-4 col-md-4 col-sm-12">
						<div class="card bg-warning-subtle">
							<div class="card-body">
								<div class="d-flex align-items-center justify-content-between">
									<div>
										<h4 class="card-title mb-2 d-flex align-items-center gap-2">Gần Hết Hàng</h4>
										<p class="text-muted fw-medium fs-22 mb-0">231 <span class="fs-12">(sản phẩm)</span></p>
									</div>
									<div>
										<div class="avatar-md bg-primary bg-opacity-10 rounded">
											<iconify-icon icon="solar:bag-cross-broken" class="fs-32 text-primary avatar-title"></iconify-icon>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>

				</div>

				<div class="row">
					<div class="col-xl-12">
						<div class="card">
							<div class="card-header d-flex justify-content-between align-items-center gap-1">
								<h4 class="card-title flex-grow-1">Tất Cả</h4>

								<a href="@Url.Action("CreateBrand", "Brand")" class="btn btn-sm btn-primary px-4">
									Thêm Mới
								</a>

								<div class="dropdown">
									<a href="#" class="dropdown-toggle btn btn-sm btn-outline-light" data-bs-toggle="dropdown" aria-expanded="false">
										Sắp Xếp
									</a>
									<div class="dropdown-menu dropdown-menu-end">
										<!-- item-->
										<a href="#!" class="dropdown-item" onclick="setSortCriteria('name')">Tên</a>
										<!-- item-->
										<a href="#!" class="dropdown-item" onclick="setSortCriteria('productCount')">Số Lượng SP</a>
									</div>
								</div>
							</div>
							<div>
								<div class="table-responsive">
									<table id="categoryTable" class="table align-middle mb-0 table-hover table-centered">
										<thead class="bg-light-subtle">
											<tr>
												<th style="width: 20px;">#</th>
												<th>Thương Hiệu</th>
												<th>Địa Điểm</th>
												<th>Tồn Kho</th>
												<th>Mô tả</th>
												<th>Giá Trị Tồn Kho</th>
												<th>Hành Động</th>
											</tr>
										</thead>
										<tbody id="categoryTableBody">
											<!--Data-->
										</tbody>
									</table>
								</div>
								<!-- end table-responsive -->
							</div>


							<div class="card-footer border-top">
								<nav aria-label="Page navigation example">
									<ul class="pagination justify-content-end mb-0" id="pagination">
										<!--Trang-->
									</ul>
								</nav>
							</div>
						</div>
					</div>
				</div>
			</div>
			<!-- End Container Fluid -->
			<!-- ========== Footer Start ========== -->
			@await Html.PartialAsync("_Footer")
			<!-- ========== Footer End ========== -->
		</div>
		<!-- ==================================================== -->
		<!-- End Page Content -->
		<!-- ==================================================== -->

	</div>
	<!-- END Wrapper -->
	<!-- Vendor Javascript (Require in all Page) -->
	<script src="~/js/vendor.js"></script>

	<!-- App Javascript (Require in all Page) -->
	<script src="~/js/app.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
	<script>
		const itemsPerPage = 8;
		let currentPage = 1;
		const maxVisiblePages = 5;
		let searchQuery = '';
		let sortCriteria = 'name';
		let isDescending = false;

		function updateUrlParameters() {
			const url = new URL(window.location);
			url.searchParams.set('searchQuery', searchQuery);
			url.searchParams.set('sortCriteria', sortCriteria);
			url.searchParams.set('currentPage', currentPage);
			window.history.pushState({}, '', url);
			console.log('Updated URL:', url.toString());
		}

		function setSortCriteria(criteria) {
			if (sortCriteria === criteria) {
				// Nếu tiêu chí sắp xếp giống lần trước, đổi trạng thái isDescending
				isDescending = !isDescending;
			} else {
				// Nếu tiêu chí sắp xếp thay đổi, đặt isDescending về false
				isDescending = false;
			}
			sortCriteria = criteria;
			currentPage = 1;
			updateUrlParameters();
			renderCategoryTable(currentPage);
			renderPagination();
		}

		async function renderCategoryTable(page) {
			const paginatedCategories = await GetCategory(searchQuery, page, itemsPerPage, sortCriteria);
			const tableBody = document.getElementById('categoryTableBody');
			tableBody.innerHTML = '';
			paginatedCategories.forEach((item, index) => {
				tableBody.innerHTML += HTMLCategory(item, (page - 1) * itemsPerPage + index);
			});
		}

		async function renderPagination() {
			const totalPages = await GetTotalPages();
			const pagination = document.getElementById('pagination');
			pagination.innerHTML = '';

			let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
			let endPage = Math.min(totalPages, currentPage + Math.floor(maxVisiblePages / 2));

			if (endPage - startPage + 1 < maxVisiblePages) {
				if (endPage === totalPages) {
					startPage = Math.max(1, endPage - maxVisiblePages + 1);
				} else {
					endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
				}
			}

			pagination.innerHTML += `
									<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
										<a class="page-link" href="javascript:void(0);" onclick="changePage(${currentPage - 1})">Trước</a>
									</li>
								`;

			for (let i = startPage; i <= endPage; i++) {
				pagination.innerHTML += `
										<li class="page-item ${i === currentPage ? 'active' : ''}">
											<a class="page-link" href="javascript:void(0);" onclick="changePage(${i})">${i}</a>
										</li>
									`;
			}

			pagination.innerHTML += `
									<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
										<a class="page-link" href="javascript:void(0);" onclick="changePage(${currentPage + 1})">Tiếp Theo</a>
									</li>
								`;
		}

		async function changePage(page) {
			const totalPages = await GetTotalPages();
			if (page < 1 || page > totalPages) return;
			currentPage = page;
			await renderCategoryTable(page);
			renderPagination();
		}

		function HTMLCategory(item, index) {
			const minPrice = parseFloat(item.price);
			const formattedMinPrice = isNaN(minPrice) ? '0' : minPrice.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
			const maxDescriptionLength = 50; // Giới hạn số ký tự
			const shortDescription = item.description.length > maxDescriptionLength
				? item.description.substring(0, maxDescriptionLength) + "..."
				: item.description;
			const maxLocationNameLength = 20; // Giới hạn số ký tự cho tên địa điểm

			// Tạo danh sách địa điểm
			const locationsHTML = item.locations.map(location => {
				const shortLocationName = location.name.length > maxLocationNameLength
					? location.name.substring(0, maxLocationNameLength) + "..."
					: location.name;
				return `
							<div>
								<strong>${shortLocationName}</strong><br>
								<a href="${location.youtubeLink}" target="_blank">Xem trên bản đồ</a>
							</div>
						`;
			}).join('<br>'); // Sử dụng <br> để ngăn cách giữa các địa điểm

			return `
						<tr>
							<td>${index + 1}</td>
							<td>${item.brandName}</td>
							<td>${locationsHTML}</td>
							<td>${item.stockAvailable}</td>
							<td>${shortDescription}</td>
							<td>${formattedMinPrice}</td>
							<td>
								<div class="d-flex gap-2">
									<a href="UpdateBrand/${item.brandId}" class="btn btn-light btn-sm">
										<iconify-icon icon="solar:eye-broken" class="align-middle fs-18"></iconify-icon>
									</a>
									<a href="UpdateBrand/${item.brandId}" class="btn btn-soft-primary btn-sm">
										<iconify-icon icon="solar:pen-2-broken" class="align-middle fs-18"></iconify-icon>
									</a>
									<a href="javascript:void(0);" onclick="confirmDelete('${item.brandId}')" class="btn btn-soft-danger btn-sm">
										<iconify-icon icon="solar:trash-bin-minimalistic-2-broken" class="align-middle fs-18"></iconify-icon>
									</a>
								</div>
							</td>
						</tr>
					`;
		}


		async function GetCategory(textsearch, page, limit, sortCriteria) {
			const url = `https://localhost:7069/api/Brand/GetFilteredBrands?searchQuery=${encodeURIComponent(textsearch)}&page=${page}&sortCriteria=${encodeURIComponent(sortCriteria)}&isDescending=${isDescending}`;
			return new Promise((resolve, reject) => {
				$.ajax({
					url: url,
					type: 'GET',
					dataType: 'json',
					success: function (data) {
						resolve(data);
						console.log('Data received:', data);
					},
					error: function (jqXHR, textStatus, errorThrown) {
						console.error('Error:', textStatus, errorThrown);
						reject(errorThrown);
					}
				});
			});
		}

		async function GetTotalPages() {
			const response = await $.ajax({
				url: 'https://localhost:7069/api/Brand/TotalPagesBrands?searchQuery=' + encodeURIComponent(searchQuery),
				type: 'GET',
				dataType: 'json'
			});
			return response > 0 ? response : 1;
		}

		document.querySelector('input[name="searchQuery"]').addEventListener('keydown', async (event) => {
			if (event.key === 'Enter') {
				event.preventDefault();
				searchQuery = event.target.value;
				currentPage = 1;
				await renderCategoryTable(currentPage);
				await renderPagination();
			}
		});

		function confirmDelete(categoryId) {
			const userConfirmed = confirm("Bạn có chắc chắn muốn xóa thương hiệu này?");
			if (userConfirmed) {
				// Gửi yêu cầu xóa tới API
				deleteCategory(categoryId);
			}
		}

		async function deleteCategory(categoryId) {
			try {
				const response = await fetch(`https://localhost:7069/api/Brand/Delete/${categoryId}`, {
					method: 'DELETE',
				});

				if (response.ok) {
					// Nếu xóa thành công, cập nhật lại giao diện (có thể xóa dòng khỏi bảng)
					alert('Thương hiệu đã được xóa!');
					window.location.reload(); // Tải lại trang hoặc xóa dòng khỏi bảng
				} else {
					// Xử lý nếu có lỗi
					alert('Không thể xóa thương hiệu!');
				}
			} catch (error) {
				console.error('Có lỗi khi xóa thương hiệu:', error);
				alert('Lỗi khi xóa thương hiệu!');
			}
		}
		renderCategoryTable(currentPage);
		renderPagination();
	</script>
</body>


</html>